# -*- coding: utf-8 -*-
"""LS_NLP_prob_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AuETXsbc2EwCM7s3QYChUtH21xkvW7IJ
"""

!pip install nltk gensim scikit-learn contractions

import pandas as pd
import numpy as np
import gensim.downloader as api
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import nltk
import re
import string
import contractions
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('wordnet')
nltk.download('stopwords')

df = pd.read_csv('Tweets.csv')
df = df[['airline_sentiment', 'text']]
df = df.dropna()

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess_tweet(tweet):
    tweet = tweet.lower()
    tweet = re.sub(r"http\S+|www.\S+", "", tweet)  # Remove URLs
    tweet = re.sub(r"@\w+|#\w+", "", tweet)         # Remove mentions/hashtags
    tweet = contractions.fix(tweet)                # Expand contractions
    tweet = tweet.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    tokens = word_tokenize(tweet)
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word.isalpha() and word not in stop_words]
    return tokens

df['Tokens'] = df['text'].apply(preprocess_tweet)

w2v_model = api.load('word2vec-google-news-300')

def vectorize(tokens):
    valid_words = [w2v_model[word] for word in tokens if word in w2v_model]
    return np.mean(valid_words, axis=0) if valid_words else np.zeros(300)

df['Vector'] = df['Tokens'].apply(vectorize)

label_map = {'negative': 0, 'neutral': 1, 'positive': 2}
df['Label'] = df['airline_sentiment'].map(label_map)

X = np.vstack(df['Vector'].values)
y = df['Label'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
print("Test Accuracy:", accuracy_score(y_test, y_pred))

def predict_tweet_sentiment(model, w2v_model, tweet):
    tokens = preprocess_tweet(tweet)
    vector = vectorize(tokens).reshape(1, -1)
    pred = model.predict(vector)[0]
    return {0: 'negative', 1: 'neutral', 2: 'positive'}[pred]

predict_tweet_sentiment(clf, w2v_model, "I had a great flight with United Airlines!")